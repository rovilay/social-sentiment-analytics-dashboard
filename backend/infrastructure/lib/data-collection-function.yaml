Parameters:
  BucketName:
    Type: String
    Description: Unique name for the S3 bucket
  EnvVariablesAndCredentials:
    Type: String
    Description: Env Variables and credentials manager
Resources:
  DataCollectionCodeExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DataCollectionExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Object
                Resource: !Sub arn:aws:s3:::${BucketName}/*
        - PolicyName: AccessEnvVariablesAndCredentials
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref EnvVariablesAndCredentials
        - PolicyName: DataCollectionLogAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: DataCollectionKinesisAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                Resource: !ImportValue SocialMediaDataStreamArn

  DataCollectionFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - DataCollectionCodeExecutionRole
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: data-collection-function.zip
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt DataCollectionCodeExecutionRole.Arn
      Timeout: 30
      LoggingConfig:
        LogGroup: '/aws/lambda/DataCollectionFunction'

  DataCollectionEventRole:
    Type: AWS::IAM::Role
    DependsOn:
      - DataCollectionFunction
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'events.amazonaws.com'
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DataCollectionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:InvokeFunction'
                Resource: !GetAtt DataCollectionFunction.Arn

  DataCollectionEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: DataCollectionEventBridgeRule
      Description: Rule to trigger DataCollection Lambda function
      ScheduleExpression: rate(3 minutes)
      State: ENABLED
      Targets:
        - Id: DataCollectionFunctionTarget
          Arn: !GetAtt DataCollectionFunction.Arn
          RoleArn: !GetAtt DataCollectionEventRole.Arn
Outputs:
  DataCollectionFunctionArn:
    Value: !GetAtt DataCollectionFunction.Arn
    Export:
      Name: DataCollectionFunctionArn
  DataCollectionFunctionName:
    Value: !Ref DataCollectionFunction
    Export:
      Name: DataCollectionFunctionName
  DataCollectionEventRoleArn:
    Value: !GetAtt DataCollectionEventRole.Arn
    Export:
      Name: DataCollectionEventRoleArn

